# This grid is randomly generated by an online Sudoku game
grid = [
    [6, 0, 8, 0, 0, 3, 0, 2, 4],
    [4, 3, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 5, 0, 0, 8, 0],
    [8, 6, 0, 4, 7, 0, 0, 3, 0],
    [0, 7, 4, 1, 6, 2, 8, 9, 5],
    [1, 0, 0, 5, 0, 0, 0, 0, 7],
    [2, 0, 6, 0, 4, 0, 1, 0, 0],
    [0, 4, 3, 8, 0, 0, 6, 0, 0],
    [0, 8, 0, 7, 2, 6, 9, 0, 0]
]

# This prints the grid into a nice visual board
def board_visual(br):

    for i in range(len(br)):
        if i % 3 == 0 and i != 0:
            print("-----------------------")

        for j in range(len(br[0])):
            if j % 3 == 0 and j != 0:
                print(" | ", end="")

            if j == 8:
                print(br[i][j])

            else:
                print(str(br[i][j]) + " ", end="")


# This finds the empty cases to fill/the cases with the number '0'
def space_to_fill(br):
    for i in range(len(br)):
        for j in range(len(br[0])):
            if br[i][j] == 0:
                return (i, j)  #row , column
    return None


# This checks if the inserted number is valid by using the 3 constraints
def valid_num(br, num, pos):

    # Check the row
    for i in range(len(br[0])):
        if br[pos[0]][i] == num and pos[1] != i:
            return False

    # Check the column
    for i in range(len(br)):
        if br[i][pos[1]] == num and pos[0] != i:
            return False

    # Check the box
    pos_x = pos[1] // 3
    pos_y = pos[0] // 3

    for i in range(pos_y * 3, pos_y * 3 + 3):
        for j in range(pos_x * 3, pos_x * 3 + 3):
            if br[i][j] == num and (i, j) != pos:
                return False
    return True

# This backtracks to previous filled spaces in case all inserted numbers are not valid, until last case has found a valid number and the final solution is found
def solution(br):

    find = space_to_fill(br)
    if not find:
        return True
    else:
        row, col = find

    for i in range(1, 10):
        if valid_num(br, i, (row, col)):
            br[row][col] = i

            if solution(br):
                return True

            br[row][col] = 0

    return False

# This prints the grid at the initial state, run the solution, then print it again after the solution
board_visual(grid)
solution(grid)
print("\n")
board_visual(grid)